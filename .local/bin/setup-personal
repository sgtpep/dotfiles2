#!/bin/bash
set -eu

function configure-apt-sources {
  local release=$(lsb_release -cs)
  sudo tee /etc/apt/sources.list > /dev/null << EOF
deb http://deb.debian.org/debian $release main
deb http://security.debian.org/debian-security $release/updates main
EOF
}

function confirm-reboot {
  if [[ -f /run/reboot-required ]]; then
    read -p 'Reboot? [Y/n] '
    [[ ! $REPLY =~ ^[Yy]*$ ]] || sudo reboot
  fi
}

function install-packages {
  local packages=(
    aria2
    bsd-mailx
    certbot
    git
    man-db
    msmtp-mta
    ncdu
    nginx-light
    rss2email
    rsync
    tmux
    ufw
    unattended-upgrades
    uwsgi
    uwsgi-plugin-python3
  )
  dpkg -s "${packages[@]}" &> /dev/null || sudo apt -y install "${packages[@]}"
}

function run-actions {
  if [[ $@ ]]; then
    local options=(-FOahvz --progress)
    local path=~/Downloads/personal
    if [[ $1 == backup ]]; then
      exec rsync "${options[@]}" --delete personal: "$path"
    elif [[ $1 == restore ]]; then
      exec rsync "${options[@]}" -u "$path"/ personal:
    else
      return 1
    fi
  fi
}

function run-script {
  ssh -t personal "set -$-; $(< "${BASH_SOURCE[0]}")"
}

function download-dotfile {
  local path=~/$1
  if [[ ! -f $path ]]; then
    mkdir -p "${path%/*}"
    wget -O "$path" https://raw.githubusercontent.com/sgtpep/dotfiles/master/"$1"
  fi
  [[ $path != ~/.local/bin/* ]] || chmod +x "$path"
}

email=mail'@'danil.mobi

function configure-msmtp {
  local aliases_path=/etc/aliases
  sudo tee "$aliases_path" > /dev/null <<< "default: $email"
  local netrc_path=~/.netrc
  sudo tee /etc/msmtprc > /dev/null << EOF
account default
  aliases $aliases_path
  auth on
  from $email
  host $(grep -Po '(?<=\bmachine\s)\s*smtp\.[^\s]+' "$netrc_path")
  port 587
  tls on
  tls_trust_file /etc/ssl/certs/ca-certificates.crt
  user $email
EOF
  sudo ln -fs "$netrc_path" /etc/netrc
}

function configure-ufw {
  local output=$(sudo ufw status)
  local port
  for port in 22 443 80; do
    grep -q "^$port " <<< $output || sudo ufw allow "$port"
  done
  grep -q ' active$' <<< $output || yes | sudo ufw enable
}

function configure-unattended-upgrades {
  sudo sed -i 's/^\/*\(Unattended-Upgrade::Automatic-Reboot "\)[^"]*/\1true/' /etc/apt/apt.conf.d/50unattended-upgrades
}

function schedule-rss2email {
  local command=r2e
  sudo tee /etc/cron.d/"$command" > /dev/null << EOF
0 */3 * * * $USER $command run > /dev/null 2>&1
0 1 * * 0 $USER $command run 2>&1 | grep -v '^sax parsing error:'
EOF
}

function setup-gallery {
  local command=generate-gallery
  download-dotfile .local/bin/"$command"
  sudo tee /etc/cron.d/"$command" > /dev/null << EOF
PATH=/usr/bin:/bin:$HOME/.local/bin
0 0 */5 * * $USER $command ~/.config/gallery/config ~/www/gallery
0 0 */5 * * $USER $command ~/.config/*-gallery/config ~/www/*-gallery
EOF
}

hostname=danil.mobi

www_path=/var/www/html

function setup-certbot {
  local path=/etc/letsencrypt/cli.ini
  [[ ! $(tail -c 1 "$path") ]] || sudo tee -a "$path" > /dev/null <<< ''
  local name=post-hook
  grep -q "^$name " "$path" || sudo tee -a "$path" > /dev/null <<< "$name = systemctl reload nginx"
  [[ -d ${path%/*}/live ]] || sudo certbot certonly -d "$hostname" -m "$email" -w "$www_path" --agree-tos --no-eff-email --webroot
}

function setup-nginx {
  setup-certbot
  sudo rm -fr "$www_path"
  sudo ln -fs ~/www "$www_path"
  sudo usermod -a -G adm "$USER"
  local path=/etc/nginx/sites-enabled/default
  local checksum=$(md5sum "$path")
  local certificate=/etc/letsencrypt/live/$hostname
  sudo tee "$path" > /dev/null << EOF
server {
  listen 80 default_server;
  listen [::]:80 default_server;
  return 301 https://\$host\$request_uri;
}

server {
  add_header Strict-Transport-Security 'max-age=63072000; includeSubDomains; preload';
  gzip on;
  listen 443 ssl default_server;
  listen [::]:443 ssl default_server;
  root $www_path;
  ssl_certificate $certificate/fullchain.pem;
  ssl_certificate_key $certificate/privkey.pem;

  location ~ ^/(favicon\.ico|robots\.txt)$ {
    access_log off;
    log_not_found off;
  }

  location ~ ^/((?:|[^/]+-)gallery)/ {
    auth_basic 'Gallery';
    auth_basic_user_file $HOME/.config/\$1/htpasswd;
  }

  location /public {
    autoindex on;
    charset UTF-8;
  }
}
EOF
  md5sum -c --status <<< $checksum || sudo systemctl reload nginx
}

function setup-notes {
  download-dotfile .local/bin/notes-server
}

function setup-tasks {
  local command=tasks
  download-dotfile .local/bin/"$command"
  local mail='mail -E -a "Date: $(date -R)" -s'
  sudo tee /etc/cron.d/"$command" > /dev/null << EOF
PATH=/usr/bin:/bin:$HOME/.local/bin
0 5 * * * $USER $command today | $mail Today "\$LOGNAME"
0 5 * * * $USER $command tomorrow | $mail Tomorrow "\$LOGNAME"
0 5 * * 0 $USER $command | $mail Week "\$LOGNAME"
EOF
}

function setup-system {
  configure-msmtp
  configure-ufw
  configure-unattended-upgrades
  schedule-rss2email
  setup-gallery
  setup-nginx
  setup-notes
  setup-tasks
}

function setup-user {
  if ! ssh personal '[[ -d ~/.ssh ]]'; then
    ssh root@personal bash -"$-" << EOF
    timedatectl set-timezone '$(readlink /etc/localtime | sed 's|^/usr/share/zoneinfo/||')'
    id $USER &> /dev/null || useradd -m -G sudo -s /bin/bash $USER
    chpasswd -e <<< '$USER:$(sudo grep -Po "(?<=^$USER:)[^:]+" /etc/shadow)'
    dirname=.ssh
    cp -r ~/"\$dirname" ~$USER
    chown -R $USER: ~$USER/"\$dirname"
EOF
  fi
}

function upgrade-system {
  local path=/var/lib/apt/upgraded
  if [[ ! -f $path ]]; then
    sudo apt update
    sudo APT_LISTCHANGES_FRONTEND=none DEBIAN_FRONTEND=noninteractive apt -y -o Dpkg::Options::=--force-confnew full-upgrade
    sudo apt -y autoremove --purge
    sudo touch "$path"
  fi
}

function main {
  if [[ -v SSH_CONNECTION ]]; then
    configure-apt-sources
    upgrade-system
    install-packages
    setup-system
    confirm-reboot
  else
    run-actions "$@"
    setup-user
    run-script
  fi
}

[[ -v BASH_SOURCE[0] && ${BASH_SOURCE[0]##*/} != ${0##*/} ]] || main "$@"
